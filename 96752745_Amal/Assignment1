#include<iostream>
using namespace std;
int Array_Size;
__global__ void Sum(int* d1_in, int* d2_in, int* d_out,int* d_array_size)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if(i<*d_array_size)
        d_out[i] = d1_in[i] + d2_in[i];
}
int main()
{
    cout<<"Enter ArraySize\n";
    cin>>Array_Size;
    int h1_in[Array_Size], h_out[Array_Size],h2_in[Array_Size];
    int Array_Bytes = Array_Size * sizeof(int); 
    for(i=0;i<Array_Size;i++)
    {
        h1_in[i]=2*i;
    }
    for(i=0;i<Array_Size;i++)
    {
        h2_in[i]=3*i;
    }

    int *d1_in, *d_out, *d2_in,*d_array_size;
    cudaMalloc((void**)&d1_in, Array_Bytes);
    cudaMalloc((void**)&d2_in, Array_Bytes);
    cudaMalloc((void**)&d_out, Array_Bytes);
    cudaMalloc((void**)&d_array_size, sizeof(int));
    
    cudaMemcpy(d1_in, h1_in, Array_Bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d2_in, h2_in, Array_Bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_array_size, &Array_Size, sizeof(int), cudaMemcpyHostToDevice);
    Sum<<<ceil(1.0*Array_Size/1024), 1024>>>(d1_in, d2_in, d_out,d_array_size);
    
    cudaMemcpy(h_out, d_out, Array_Bytes, cudaMemcpyDeviceToHost);
    cudaFree(d1_in);
    cudaFree(d2_in);
    cudaFree(d_out);
}
