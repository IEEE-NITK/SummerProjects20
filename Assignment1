#include<iostream>
using namespace std;
int Array_Size;
__global__ void Sum(int* d1_in, int* d2_in, int* d_out)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
        d_out[i] = d1_in[i] + d2_in[i];
}
int main()
{
    cout << "Enter the array size : ";
    cin >> Array_Size;
    int h1_in[Array_Size], h_out[Array_Size],h2_in[Array_Size];
    int Array_Bytes = Array_Size * sizeof(int);  
    cout<<"Enter "<<Array_Size<<" elements(Array1)\n";
    for(int i=0; i<Array_Size; i++)
    cin>>h1_in[i];
    cout<<"Enter "<<Array_Size<<" elements(Array2)\n";
    for(int i=0; i<Array_Size; i++)
    cin>>h2_in[i];

    int *d1_in, *d_out, *d2_in;
    cudaMalloc((void**)&d1_in, Array_Bytes);
    cudaMalloc((void**)&d2_in, Array_Bytes);
    cudaMalloc((void**)&d_out, Array_Bytes);
    
    cudaMemcpy(d1_in, h1_in, Array_Bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d2_in, h2_in, Array_Bytes, cudaMemcpyHostToDevice);
    Sum<<<ceil(1.0*Array_Size/1024), 1024>>>(d1_in, d2_in, d_out);
    
    cudaMemcpy(h_out, d_out, Array_Bytes, cudaMemcpyDeviceToHost);
    cout<<"Sum of the 2 arrays is\n";
    for(int i=0; i<Array_Size; i++)
        cout << h_out[i] << " ";
    cudaFree(d1_in);
    cudaFree(d2_in);
    cudaFree(d_out);
}
